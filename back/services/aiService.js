import { ChatGPTAPI } from "chatgpt";
import { GoogleGenerativeAI } from "@google/generative-ai";
import { config } from "dotenv";

config();

const geminiApi = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
const gptApi = new ChatGPTAPI({
    apiKey: process.env.OPENAI_API_KEY,
});

export const getRecommendationsFromAI = async (products, interests, age, gender, ai) => {
    const items = products.map((p) => ({
        id: p.id,
        name: p.name,
        price: p.price,
        interest_category: p.interest_category,
        target_gender: p.target_gender,
        age_min: p.age_min,
        age_max: p.age_max,
    }));

    const prompt = `
–¢—ã ‚Äì —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–æ–¥–±–æ—Ä—É –ø–æ–¥–∞—Ä–∫–æ–≤. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—â–µ—Ç –ø–æ–¥–∞—Ä–æ–∫. –ï–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å—ã: ${interests.join(", ")}.
–ï–≥–æ –≤–æ–∑—Ä–∞—Å—Ç: ${age}, –ø–æ–ª: ${gender}.
–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º: ${JSON.stringify(items, null, 2)} .
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–π 3 –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç–æ–≤–∞—Ä–∞ –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞. –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON-–º–∞—Å—Å–∏–≤ —Å ID —ç—Ç–∏—Ö 3 —Ç–æ–≤–∞—Ä–æ–≤, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ (–Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–µ—Ä–≤—ã–º). –ù–∞–ø—Ä–∏–º–µ—Ä: [\"id1\", \"id3\", \"id2\"]. –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ 3, –≤–µ—Ä–Ω–∏ —Å—Ç–æ–ª—å–∫–æ, —Å–∫–æ–ª—å–∫–æ –Ω–∞—à–µ–ª, –Ω–æ –Ω–µ –±–æ–ª–µ–µ 3. –ï—Å–ª–∏ —Å–æ–≤—Å–µ–º –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –≤–µ—Ä–Ω–∏ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ [] .
`;
    console.log("üöÄ ~ getRecommendationsFromAI ~ prompt:", prompt);

    try {
        if (ai === "chatgpt") {
            const { text } = await gptApi.sendMessage(prompt);
            const ids = JSON.parse(text);
            console.log("üöÄ ~ Parsed IDs:", ids);

            return { ids, message: "–£—Å–ø—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –≤ –ò–ò. –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç.", state: "success" };
        } else if (ai === "gemini") {
            const model = geminiApi.getGenerativeModel({ model: "models/gemini-1.5-pro-latest" });
            const { response } = await model.generateContent(prompt);
            const res = response;
            const text = res.text();
            // –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–¥–∞, Markdown –∏ –ø–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å JSON:
            const cleanText = text.replace(/```(?:json)?|```/g, "").trim();

            const ids = JSON.parse(cleanText);
            console.log("üöÄ ~ Parsed IDs:", ids);

            return { ids, message: "–£—Å–ø—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –≤ –ò–ò. –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç.", state: "success" };
        } else if (ai === "openrouter") {
            const res = await fetch("https://openrouter.ai/api/v1/chat/completions", {
                method: "POST",
                headers: {
                    Authorization: `Bearer ${process.env.OPENROUTER_API_KEY}`,
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({
                    model: "google/gemini-2.0-flash-exp:free",
                    messages: [
                        {
                            role: "user",
                            content: [
                                {
                                    type: "text",
                                    text: prompt,
                                },
                            ],
                        },
                    ],
                }),
            });
            const data = await res.json();
            if (!data.choices || !data.choices[0]) {
                console.log(data)
                throw new Error("–ú–æ–¥–µ–ª—å –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –æ—Ç–≤–µ—Ç.");
            }
            console.log("–û—Ç–≤–µ—Ç:", data.choices[0].message.content)
            const text = data.choices[0].message.content
            // –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–¥–∞, Markdown –∏ –ø–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å JSON:
            const cleanText = text.replace(/```(?:json)?|```/g, "").trim();
            const ids = JSON.parse(cleanText);
            return { ids, message: "–£—Å–ø—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –≤ –ò–ò. –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç.", state: "success" };
        }
    } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –ò–ò:", err.message);
        //! –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã, –ø—Ä–∏—à–ª–æ—Å—å –∏–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –∏–∏ –≤—Ä—É—á–Ω—É—é, —Ñ–∏–ª—å—Ç—Ä—É—è –ø–µ—Ä–≤—ã–µ 3 –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ –º–∞—Å—Å–∏–≤–∞.
        const matching = items.filter((p) => {
            return (
                interests.includes(p.interest_category) &&
                p.target_gender.toLowerCase() === gender.toLowerCase() &&
                age >= p.age_min &&
                age <= p.age_max
            );
        });
        const res = {};
        res.ids = matching.slice(0, 3).map((p) => p.id);
        res.message =
            '–ò–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã –≤ –ò–ò, –ø—Ä–∏—à–ª–æ—Å—å –∏–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò –≤—Ä—É—á–Ω—É—é, —Ñ–∏–ª—å—Ç—Ä—É—è –ø–µ—Ä–≤—ã–µ 3 –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ –º–∞—Å—Å–∏–≤–∞ —Å–∞–º—ã—Ö –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å—É, –ø–æ–ª—É –∏ –≤–æ–∑—Ä–∞—Å—Ç—É. –ß—Ç–æ–±—ã –≥–ª—è–Ω—É—Ç—å –Ω–∞ –∏–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ü–∏—é —Ä–∞–±–æ—Ç–∞—é—â–µ–π –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏ —Å AI, –æ—Ç–∫—Ä–æ–π—Ç–µ "back/services/aiService.js" .';
        res.state = "warning";
        return res;
    }
};
